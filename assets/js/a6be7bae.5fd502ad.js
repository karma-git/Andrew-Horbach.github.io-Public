"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[1034],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return k}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),k=a,d=m["".concat(u,".").concat(k)]||m[k]||s[k]||o;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5186:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},assets:function(){return c},toc:function(){return s},default:function(){return k}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={title:"Helm vs Python validation",description:"\u042f \u043d\u0435\u043d\u0430\u0432\u0438\u0436\u0443 helm",slug:"helm-vs-python",authors:["a.horbach"],tags:["helm","python","pydantic","pytest","karpenter"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!1},u="\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435",p={permalink:"/Andrew-Horbach.github.io-Public/blog/helm-vs-python",editUrl:"https://github.com/karma-git/Andrew-Horbach.github.io-Public/blob/master/blog/2022-12-31-helm-vs-python.md",source:"@site/blog/2022-12-31-helm-vs-python.md",title:"Helm vs Python validation",description:"\u042f \u043d\u0435\u043d\u0430\u0432\u0438\u0436\u0443 helm",date:"2022-12-31T00:00:00.000Z",formattedDate:"December 31, 2022",tags:[{label:"helm",permalink:"/Andrew-Horbach.github.io-Public/blog/tags/helm"},{label:"python",permalink:"/Andrew-Horbach.github.io-Public/blog/tags/python"},{label:"pydantic",permalink:"/Andrew-Horbach.github.io-Public/blog/tags/pydantic"},{label:"pytest",permalink:"/Andrew-Horbach.github.io-Public/blog/tags/pytest"},{label:"karpenter",permalink:"/Andrew-Horbach.github.io-Public/blog/tags/karpenter"}],readingTime:2.54,truncated:!1,authors:[{name:"Andrew Horbach",url:"https://github.com/karma-git",imageURL:"https://github.com/karma-git.png",key:"a.horbach"}],nextItem:{title:"Terraformer - reverse Terraform",permalink:"/Andrew-Horbach.github.io-Public/blog/terraformer"}},c={authorsImageUrls:[void 0]},s=[{value:"helm",id:"helm",children:[],level:2},{value:"python",id:"python",children:[],level:2},{value:"Links",id:"links",children:[],level:2}],m={toc:s};function k(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u0420\u0435\u0448\u0430\u043b\u0438 \u0441 \u043a\u043e\u043b\u043b\u0435\u0433\u0430\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u043e\u0432 ",(0,o.kt)("strong",{parentName:"p"},"Provisioner")," \u0432 \u0446\u0438\u043a\u043b\u0435, \u043f\u0440\u0438 \u0442\u0430\u043a\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u0434\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 - \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c Container Runtime Interface (CRI), \u0438\u043d\u0430\u0447\u0435  ",(0,o.kt)("inlineCode",{parentName:"p"},"provisioner.spec.kubeletConfiguration.containerRuntime")," \u0432 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0435 ",(0,o.kt)("strong",{parentName:"p"},"Provisioner")," \u0432 \u043f\u0430\u0440\u0435 \u0441 ",(0,o.kt)("strong",{parentName:"p"},"AWSNodeTemplate")," karpenter \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u044f\u0442 \u043d\u0430\u043c ",(0,o.kt)("inlineCode",{parentName:"p"},"containerd")," (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aws/karpenter/blob/7241f43569d6878056f3251667b4689684071401/pkg/cloudprovider/launchtemplate_test.go#L894"},"\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0432 \u0442\u0435\u0441\u0442\u0435"),")"),(0,o.kt)("p",null,"\u0421\u043e\u0431\u0440\u0430\u043b\u0438 \u0440\u044f\u0434 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"CRI \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043f\u0440\u043e\u0432\u0438\u0436\u0435\u043d\u0435\u0440\u0435, \u0437\u043d\u0430\u0447\u0438\u0442 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u043d\u0430\u0441 (\u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 dockerd)"),(0,o.kt)("li",{parentName:"ul"},"CRI \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043f\u0440\u043e\u0432\u0438\u0436\u0435\u043d\u0435\u0440\u0435, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0435\u0433\u043e"),(0,o.kt)("li",{parentName:"ul"},"CRI \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043f\u0440\u043e\u0432\u0438\u0436\u0435\u043d\u0435\u0440\u0435, \u043d\u043e \u0432 ",(0,o.kt)("inlineCode",{parentName:"li"},"provisioner.spec.kubeletConfiguration")," \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b")),(0,o.kt)("p",null,"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:"),(0,o.kt)("h2",{id:"helm"},"helm"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'  # Kubelet\n  # If Provisioner.kubeletConfiguration is not empty\n  {{- if .kubeletConfiguration }}\n  kubeletConfiguration:\n    # If containerRuntime has been configured in Provisioner.kubeletConfiguration\n    {{- if hasKey .kubeletConfiguration "containerRuntime" -}}\n      {{- toYaml .kubeletConfiguration | nindent 4 }}\n    # ElseIf containerRuntime has not been configured in Provisioner.kubeletConfiguration\n    {{- else }}\n      # Pick default CRI from karpenter.default.kubeletConfiguration and add it to current .kubeletConfiguration\n      {{- $CRI := dict "containerRuntime" $.Values.karpenter.default.kubeletConfiguration.containerRuntime -}}\n      {{- $kubeletConfiguration := merge $CRI .kubeletConfiguration }}\n      {{- toYaml $kubeletConfiguration | nindent 4 }}\n    {{- end }}\n  # ElseIf Provisioner.kubeletConfiguration is empty\n  {{- else }}\n  kubeletConfiguration:\n      {{- toYaml $.Values.karpenter.default.kubeletConfiguration | nindent 4 }}\n  {{- end }}\n')),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u0422\u0435\u0441\u0442\u044b"),(0,o.kt)("p",null,"Test cases:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1) CRI \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043f\u0440\u043e\u0432\u0438\u0436\u0435\u043d\u0435\u0440\u0435\nvalues.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"karpenter:\n  payload:\n    ahorbach:\n      foo: bar\n")),(0,o.kt)("p",null,"result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  # Kubelet\n  # If Provisioner.kubeletConfiguration is not empty\n  kubeletConfiguration:\n    containerRuntime: dockerd\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"2) CRI \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043f\u0440\u043e\u0432\u0438\u0436\u0435\u043d\u0435\u0440\u0435")),(0,o.kt)("p",null,"values.yml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"karpenter:\n  payload:\n    ahorbach:\n      kubeletConfiguration:\n        bar: baz\n        containerRuntime: rocket\n")),(0,o.kt)("p",null,"result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  # Kubelet\n  # If Provisioner.kubeletConfiguration is not empty\n  kubeletConfiguration:\n    # If containerRuntime has been configured in Provisioner.kubeletConfiguration\n    bar: baz\n    containerRuntime: rocket\n    # ElseIf containerRuntime has not been configured in Provisioner.kubeletConfiguration\n  # ElseIf Provisioner.kubeletConfiguration is empty\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"3) CRI \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043f\u0440\u043e\u0432\u0438\u0436\u0435\u043d\u0435\u0440\u0435, \u043d\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433")),(0,o.kt)("p",null,"values.yml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"  payload:\n    ahorbach:\n      kubeletConfiguration:\n        spam: eggs\n")),(0,o.kt)("p",null,"result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  # Kubelet\n  # If Provisioner.kubeletConfiguration is not empty\n  kubeletConfiguration:\n    # If containerRuntime has been configured in Provisioner.kubeletConfiguration\n      # Pick default CRI from karpenter.default.kubeletConfiguration and add it to current .kubeletConfiguration\n    containerRuntime: dockerd\n    spam: eggs\n"))),(0,o.kt)("h2",{id:"python"},"python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel, validator\n\nDEFAULT_CRI = {"containerRuntime": "dockerd"}\n\nclass karpenterPayloadProvisioner(BaseModel):\n  name: str\n  kubelet_configuration: dict = DEFAULT_CRI\n\n  @validator(\'kubelet_configuration\')\n  def kubelet_container_runtime(cls, v):\n    cri = v.get("containerRuntime")\n    # option two - Mutating\n    if cri not in ["dockerd", "containerd"]:\n      v.update(DEFAULT_CRI)\n    return v\n')),(0,o.kt)("details",null,(0,o.kt)("summary",null,"\u0422\u0435\u0441\u0442\u044b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import typing as t\n\nimport pytest\n\nfrom karpenter import karpenterPayloadProvisioner\n\n# without selected CRI in Provisioner\ncase1 = ("foo", {}, "dockerd")\n\n# with containerd as a CRI for Provisioner\n\ncase2 = ("bar", {"kubeReserved": "testMe", "containerRuntime": "containerd"}, "containerd")\n\n# with typo in CRI for Provisioner\ncase3 = ("baz", {"kubeReserved": "testMe", "containerRuntime": "qwerty"}, "dockerd")\n\ntest_cases = [\n    case1,\n    case2,\n    case3,\n]\n\n@pytest.mark.parametrize("name, kubelet_configuration, expected_CRI", test_cases)\ndef test_cri_provisioner(name: str, kubelet_configuration: t.Optional[dict], expected_CRI: str):\n\n    provisioner = karpenterPayloadProvisioner(name=name, kubelet_configuration=kubelet_configuration)\n    assert provisioner.kubelet_configuration["containerRuntime"] == expected_CRI\n\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"pytest .\n=========================================================== test session starts ============================================================\nplatform darwin -- Python 3.10.0, pytest-6.2.5, py-1.11.0, pluggy-1.0.0\nrootdir: /Users/a.horbach/repository-self/python-monorepo/pydantic-karpenter\nplugins: django-4.4.0, cov-3.0.0\ncollected 3 items\n\ntest_karpenter.py ...                                                                                                                [100%]\n\n============================================================ 3 passed in 0.08s =============================================================\n"))),(0,o.kt)("h2",{id:"links"},"Links"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/karma-git/Python-Playground/tree/master/pydantic-karpenter"},"python code")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/pydantic/pydantic"},"pydantic")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/pytest-dev/pytest"},"pytest")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/aws/karpenter"},"karpenter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=dOO3GmX6ukU"},"pydantic digitalize video"))))}k.isMDXComponent=!0}}]);